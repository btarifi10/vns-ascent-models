/*
The copyrights of this software are owned by Duke University.
Please refer to the LICENSE and README.md files for licensing instructions.
The source code can be found on the following GitHub repository: https://github.com/wmglab-duke/ascent
*/

/*
Author: Nikki Pelot, but based on code from McIntyre et al. 2002
Date created: January 29, 2016

Description:
- Create myelinated MRG axon.

Variables that must be defined in wrapper/params file:
- axonnodes
- fiberD
- passive_end_nodes
*/

create node[1], MYSA[1], FLUT[1], STIN[1]
objref s[1]
objref geometry_object
load_file("GeometryBuilder.hoc")

proc CreateAxon_Myel() {
	//  Electrical parameters
	rhoa	= 0.7e6 						// [ohm-um]
	mycm	= 0.1 							// lamella membrane; [uF/cm2]
	mygm	= 0.001 						// lamella membrane; [S/cm2]
	rhoe	= 1000  						// resistivity of extracellular medium; [ohm-cm]

	if (node_channels == 0) {
		e_pas_Vrest = -80
	} else if (node_channels == 1) {
		e_pas_Vrest = -57
	}

	// Geometrical parameters [um]
	paranodes1  = 2*(axonnodes-1)  		// MYSA paranodes
	paranodes2  = 2*(axonnodes-1)  		// FLUT paranodes
	axoninter   = 6*(axonnodes-1)  		// STIN internodes
	axontotal 	= axonnodes + paranodes1 + paranodes2 + axoninter

	nodelength	= 1.0						// Length of node of Ranvier [um]
	paralength1	= 3  						// Length of MYSA [um]
	space_p1	= 0.002						// Thickness of periaxonal space in MYSA sections [um]
	space_p2	= 0.004						// Thickness of periaxonal space in FLUT sections [um]
	space_i		= 0.004						// Thickness of periaxonal space in STIN sections [um]

	if (geometry_determination_method==0) {
	    // MRG_DISCRETE
		if (fiberD==1) 			  {axonD=0.8  nodeD=0.7 paraD1=0.7 paraD2=0.8  deltaz=100  paralength2=5 nl=15}
		if (fiberD==2) 			  {axonD=1.6  nodeD=1.4 paraD1=1.4 paraD2=1.6  deltaz=200  paralength2=10 nl=30}
		if (fiberD==5.7)  {g=0.605 axonD=3.4  nodeD=1.9 paraD1=1.9 paraD2=3.4  deltaz=500  paralength2=35 nl=80}
		if (fiberD==7.3)  {g=0.630 axonD=4.6  nodeD=2.4 paraD1=2.4 paraD2=4.6  deltaz=750  paralength2=38 nl=100}
		if (fiberD==8.7)  {g=0.661 axonD=5.8  nodeD=2.8 paraD1=2.8 paraD2=5.8  deltaz=1000 paralength2=40 nl=110}
		if (fiberD==10.0) {g=0.690 axonD=6.9  nodeD=3.3 paraD1=3.3 paraD2=6.9  deltaz=1150 paralength2=46 nl=120}
		if (fiberD==11.5) {g=0.700 axonD=8.1  nodeD=3.7 paraD1=3.7 paraD2=8.1  deltaz=1250 paralength2=50 nl=130}
		if (fiberD==12.8) {g=0.719 axonD=9.2  nodeD=4.2 paraD1=4.2 paraD2=9.2  deltaz=1350 paralength2=54 nl=135}
		if (fiberD==14.0) {g=0.739 axonD=10.4 nodeD=4.7 paraD1=4.7 paraD2=10.4 deltaz=1400 paralength2=56 nl=140}
		if (fiberD==15.0) {g=0.767 axonD=11.5 nodeD=5.0 paraD1=5.0 paraD2=11.5 deltaz=1450 paralength2=58 nl=145}
		if (fiberD==16.0) {g=0.791 axonD=12.7 nodeD=5.5 paraD1=5.5 paraD2=12.7 deltaz=1500 paralength2=60 nl=150}
		interlength=(deltaz-nodelength-(2*paralength1)-(2*paralength2))/6

	} else if (geometry_determination_method==1) {
	    // MRG_INTERPOLATION
	    nl          = -0.4749*fiberD^2 + 16.85*fiberD - 0.7648
		nodeD       = 0.01093*fiberD^2 + 0.1008*fiberD + 1.099
		paraD1      = nodeD
		paraD2      = 0.02361*fiberD^2 + 0.3673*fiberD + 0.7122
		axonD       = paraD2
		paralength2 = -0.1652*fiberD^2 + 6.354*fiberD - 0.2862

		if (fiberD >= 5.643) {
			deltaz = -8.215*fiberD^2 + 272.4*fiberD - 780.2
		} else {
			deltaz = 81.08*fiberD + 37.84
		}

	} else if (geometry_determination_method==2) {
		if (fiberD>5.7) {
			printf("WARNING - geometry_determination_method value %d  is not recommended for fiber diameters above 5.7 um",geometry_determination_method)
		}
		geometry_object = new GeometryBuilder(fiberD)
		nodelength  = geometry_object.nodelength
		paralength1 = geometry_object.MYSAlength
		axonD       = geometry_object.axonD
		nodeD       = geometry_object.nodeD
		paraD1      = geometry_object.MYSAD
		paraD2      = geometry_object.FLUTD
		paralength2 = geometry_object.FLUTlength
		deltaz      = 6*geometry_object.interlength+nodelength+(2*paralength1)+(2*paralength2)
		nl          = geometry_object.nl
	}

	Rpn0 = (rhoa*.01)/(PI*((((nodeD/2)  + space_p1)^2) - ((nodeD/2)^2)))
	Rpn1 = (rhoa*.01)/(PI*((((paraD1/2) + space_p1)^2) - ((paraD1/2)^2)))
	Rpn2 = (rhoa*.01)/(PI*((((paraD2/2) + space_p2)^2) - ((paraD2/2)^2)))
	Rpx  = (rhoa*.01)/(PI*((((axonD/2)  + space_i)^2)  - ((axonD/2)^2)))
	interlength=(deltaz-nodelength-(2*paralength1)-(2*paralength2))/6

	// Create axon
	create node[axonnodes], MYSA[paranodes1], FLUT[paranodes2], STIN[axoninter]

	// s is a pointer to all the elements of the neuron (i.e. dendrites, soma, axon)
	// s[i] = new SectionRef()
	//  - keeps a pointer reference to a given section
	objref s[axontotal]

	for i=0,axonnodes-1 {
		node[i] {
			s[i*11]	= new SectionRef()
			nseg	= 1
			diam	= nodeD
			L		= nodelength
			Ra		= rhoa/10000

			// Passive end nodes
			if ((i == 0 || i == axonnodes-1) && (passive_end_nodes == 1)) {
				//print "i for passive: ", i
				cm		= 2
				insert pas
				g_pas = 0.0001
				e_pas = -70
				insert extracellular
				xg      = mygm/(nl*2)
				xc      = mycm/(nl*2)
			} else {
				if (node_channels == 0) {
					cm		= 2
					insert axnode_myel
					// set gnabar and gkbar to values that don't produce multi-AP in response to single stim pulses (SMALL_MRG_INTERPOLATION_V1 fibers only)
					if (geometry_determination_method==2) {
						gnabar_axnode_myel = 2.333333
						gkbar_axnode_myel = 0.115556
					}
				} else if (node_channels == 1) {
					// cm = 1.326291192				// [uF/cm^2] specific membrane capacitance (Schild 1994, C-type)
					cm = 1.149452367				// [uF/cm^2] specific membrane capacitance (Schild 1994, A-type)

					F = 96500								// [C/mole] Faraday's Constant from Schild 1994
					R = 8314								// [J/(kg*mole*K)] Gas Constant from Schild 1994

					// Schild 1994 ion channels
					insert leakSchild
					insert naf
					insert nas
					insert kd
					insert ka
					insert can
					insert cat
					insert kds
					insert kca

					insert caextscale
					insert caintscale
					insert CaPump
					insert NaCaPump
					insert NaKpumpSchild

					L_caintscale = L
					nseg_caintscale = nseg
					L_caextscale = L
					nseg_caextscale = nseg

					// Ionic concentrations
					cao0_ca_ion = 2.0							    // [mM] Initial Cao Concentration
					cai0_ca_ion = .000117						    // [mM] Initial Cai Concentrations

					ko      = 5.4									// [mM] External K Concentration
					ki      = 145.0									// [mM] Internal K Concentration
					kstyle  = ion_style("k_ion",1,2,0,0,0) 		    // Allows ek to be calculated manually
					ek      = ((R*(celsius+273.15))/F)*log(ko/ki)	// Manual Calculation of ek in order to use Schild F and R values

					nao     = 154.0									// [mM] External Na Concentration
					nai     = 8.9									// [mM] Internal Na Concentration
					nastyle = ion_style("na_ion",1,2,0,0,0) 		// Allows ena to be calculated manually
					ena     = ((R*(celsius+273.15))/F)*log(nao/nai)	// Manual Calculation of ena in order to use Schild F and R values


					// Conductances and voltage shift values for A-type (ion channel mod file defaults are for C-type) -- see Schild 1994
					// [S/cm^2] This block sets the conductance and shift values to their A-Fiber values, per Schild 1994
					gbar_naf     = 3//0.072503919 	// NOTE: Does not conduct with original Schild 1994 value of 0.072503919; does not conduct at 0.5, but does at 1; increased to MRG value of 3
					shiftnaf_naf = 0			// [mV]
					gbar_nas     = 3.53678E-07
					shiftnas_nas = 0
					gbar_kd      = 0.000194523
					shiftkd_kd   = 0
					gbar_ka      = 0.001237872
					shiftka_ka   = 0
					gbar_kds     = 0.000353678
					shiftkds_kds = 0
					gbar_kca     = 0.00022989
					gbar_can     = 3.53678E-05
					shiftcan_can = 0
					gbar_cat     = 1.23787E-05
					shiftcan_cat = 0
					gbna_leak    = 1.14945E-05
				}

				insert extracellular xraxial=Rpn0
				xg=1e10 // short circuit
				xc=0    // short circuit
			}

		}
	}

	for i=0, paranodes1-1 {
		MYSA[i] {
			if ((i%2) == 0) {
				s[((i/2)*11)+1] = new SectionRef()
				//print ((i/2)*11)+1
			} else {
				s[(((i+1)/2)*11)-1] = new SectionRef()
				//print (((i+1)/2)*11)-1
			}
			nseg	= 1
			diam	= fiberD
			L		= paralength1
			Ra		= rhoa*(1/(paraD1/fiberD)^2)/10000
			cm		= 2*paraD1/fiberD
			insert pas
			g_pas	= 0.001*paraD1/fiberD
			e_pas	= e_pas_Vrest//-80//v_init
			insert extracellular xraxial=Rpn1 xg=mygm/(nl*2) xc=mycm/(nl*2)
		}
	}

	for i=0, paranodes2-1 {
		FLUT[i] {
			if ((i%2) == 0) {
				s[((i/2)*11)+2] = new SectionRef()
				//print ((i/2)*11)+2
			} else {
				s[(((i+1)/2)*11)-2] = new SectionRef()
				//print (((i+1)/2)*11)-2
			}
			nseg	= 1
			diam	= fiberD
			L		= paralength2
			Ra		= rhoa*(1/(paraD2/fiberD)^2)/10000
			cm		= 2*paraD2/fiberD
			insert pas
			g_pas	= 0.0001*paraD2/fiberD
			e_pas	= e_pas_Vrest//-80//v_init
			insert extracellular xraxial=Rpn2 xg=mygm/(nl*2) xc=mycm/(nl*2)
		}
	}

	for i=0, axoninter-1 {
		STIN[i]{
			if ((i%6) == 5) {
				s[(((i+1)/6)*11)-3] = new SectionRef()
				//print (((i+1)/6)*11)-3
			} else if ((i%6) == 4) {
				s[(((i+2)/6)*11)-4] = new SectionRef()
				//print (((i+2)/6)*11)-4
			} else if ((i%6) == 3) {
				s[(((i+3)/6)*11)-5] = new SectionRef()
				//print (((i+3)/6)*11)-5
			} else if ((i%6) == 2) {
				s[(((i+4)/6)*11)-6] = new SectionRef()
				//print (((i+4)/6)*11)-6
			} else if ((i%6) == 1) {
				s[(((i+5)/6)*11)-7] = new SectionRef()
				//print (((i+5)/6)*11)-7
			} else if ((i%6) == 0) {
				s[(((i+6)/6)*11)-8] = new SectionRef()
				//print (((i+6)/6)*11)-8
			}
			nseg	= 1
			diam	= fiberD
			L		= interlength
			Ra		= rhoa*(1/(axonD/fiberD)^2)/10000
			cm		= 2*axonD/fiberD
			insert pas
			g_pas	= 0.0001*axonD/fiberD
			e_pas	= e_pas_Vrest//-80//v_init
			insert extracellular xraxial=Rpx xg=mygm/(nl*2) xc=mycm/(nl*2)
		}
	}

	for i=0, axonnodes-2 {
		connect MYSA[2*i](0), node[i](1)
		connect FLUT[2*i](0), MYSA[2*i](1)
		connect STIN[6*i](0), FLUT[2*i](1)
		connect STIN[6*i+1](0), STIN[6*i](1)
		connect STIN[6*i+2](0), STIN[6*i+1](1)
		connect STIN[6*i+3](0), STIN[6*i+2](1)
		connect STIN[6*i+4](0), STIN[6*i+3](1)
		connect STIN[6*i+5](0), STIN[6*i+4](1)
		connect FLUT[2*i+1](0), STIN[6*i+5](1)
		connect MYSA[2*i+1](0), FLUT[2*i+1](1)
		connect node[i+1](0), MYSA[2*i+1](1)
	}
}
