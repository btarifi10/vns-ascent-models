/*
The copyrights of this software are owned by Duke University.
Please refer to the LICENSE and README.md files for licensing instructions.
The source code can be found on the following GitHub repository: https://github.com/wmglab-duke/ascent
*/

//node_channels = 1						// node_channels = 0 for MRG; node_channels = 1 for Schild 1994
if (node_channels == 1) {
	print "WARNING - node_channels = 1. This will cause Myelinated fibers to run with Schild 1994 mechanisms..."
}

if (!((passive_end_nodes == 0) || (passive_end_nodes == 1))) {
	print "passive_end_nodes must be set to 0 or 1"
	execerror("passive_end_nodes must be set to 0 or 1")
}

// Turn on/off extracellular stim
if ((flag_whichstim == 0) && (flag_extracellular_stim == 0)) {
	execerror("Want to find_thresh for extracellular stim, so need flag_extracellular_stim = 1")
}

// SCALING EXTRACELLULAR STIM BY IAPPLIED, DESIRED AMP, AND/OR UNIT CONVERSION
/*
Turn on/off scaling of extracellular stim by Iapplied.
Ve(x) is assumed to be for 1 mA, so if you obtained the potentials with a voltage BC in an FEM,
you might need to scale by the applied current to get the spatial extracellular potentials corresponding
to a 1 mA stim.
However, if you computed potentials for a point source, or used a current or current density BC in an FEM,
then you don't want to scale Iapplied.
*/
flag_Iapplied = 0

// Set default stim amp for extracellular stim (imp if flag_extracellular_stim=1
// but finding thresh or running stimamp_values for an intracellular pulse...unlikely to come up)
stimamp_extra = 0

// Set multiplicative scaling factor such that Ve will be in millivolts (as required for e_extracellular mechanism)
Ve_unitconv = 1000

// Set appropriate initialization potentials (i.e. Vrest)
/*
NOTE: In MRG-style myelinated axons, the resting membrane potential at the nodes is driven by the battery in the non-nodal sections,
whose value is given by e_pas_Vrest in CreateAxon_Myel.hoc. So as a rule of thumb, should set e_pas_Vrest and v_init to the same value.
*/

// ***************************************************************************
// CreateAxon_Myel.hoc
if (fiber_type == 2) {
	load_file("CreateAxon_Myel.hoc")
	CreateAxon_Myel()
}

// ***************************************************************************
// cFiberBuilder.hoc
if (fiber_type == 3) {
	load_file("cFiberBuilder.hoc")
	load_file("CreateAxon_CFiber.hoc")

	CreateAxon_CFiber()
}

	   if 	(fiber_type == 1) { 	v_init = -88.3 				// [mV]
} else if   (fiber_type == 2) { 	v_init = -80 				// See note above !! [mV]
} else if 	(fiber_type == 3) {		v_init = v_init_c_fiber		// [mV]
}

// ***************************************************************************
// IntracellularStim.hoc
objref stim

if (fiber_type == 2) {// if myelinated fiber, convert node index to compartment index
	intrastim_ind_tmp = IntraStim_PulseTrain_ind*11
} else {
	intrastim_ind_tmp = IntraStim_PulseTrain_ind
}

s[intrastim_ind_tmp].sec {
	stim 		= new trainIClamp()
	stim.loc(.5)
	stim.del 	= IntraStim_PulseTrain_delay
	stim.PW		= IntraStim_PulseTrain_pw
	stim.train 	= IntraStim_PulseTrain_traindur
	stim.freq	= IntraStim_PulseTrain_freq
	stim.amp	= IntraStim_PulseTrain_amp
}

// ***************************************************************************
// Read in Iapplied from file
strdef VeSpace_Iapplied_fname
objref Iapplied_file, Iapplied

// ***************************************************************************
// ExtracellularStim_Time.hoc
strdef VeTime_fname
load_file("ExtracellularStim_Time.hoc")


// ***************************************************************************
// ExtracellularStim_Space.hoc
strdef VeSpace_fname
strdef VeSpace_rec_fname // Since this variable is used in a proc of ExtracellularStim_Space, it must be declared before that script is loaded, otherwise there will be a runtime error stating that VeSpace_rec_fname (even though that proc is not actually used until later in the code)
load_file("ExtracellularStim_Space.hoc")

// ***************************************************************************
// Extracelluar recording
objref SFAP
strdef SFAP_fname

// Set SFAP_dt_downsample_factor to an integer greater than or equal to 1; a
// value of 1 will save SFAP at every dt time step; a value of 2 will save
// SFAP at every other dt time step; etc.
SFAP_dt_downsample_factor = 1
if (SFAP_dt_downsample_factor%1 != 0 || SFAP_dt_downsample_factor < 0) {
	execerror("SFAP_dt_downsample_factor must be an integer greater than or equal to 1")
}

// ***************************************************************************
// Recording.hoc

// Check time indices
for i = 0, Nchecktimes-1 {
	checktime_values.x[i] = int(checktime_values_ms.x[i]/dt)
}

objref checknode_Ve_values
checknode_Ve_values 			= new Vector(1,0)
if (fiber_type == 2) { // myelinated
	checknode_Ve_values.x[0]	= 11*int((axonnodes-1)/2)
} else { // unmyelinated
	checknode_Ve_values.x[0]	= int((axonnodes-1)/2)
}

load_file("Recording.hoc")
strdef Imembrane_fname_output
objref Imembrane, dt_vector, tstop_vector, axontotal_vector, Imembrane_save_format_vector, num_compartments_to_save

// ***************************************************************************
// Call sequence of procedures/functions for each sim
load_file("RunSim.hoc")

strdef fname_output_SFAP_time
strdef fname_output_Vm_time
strdef fname_output_Vm_space
strdef fname_output_gating_m_time, fname_output_gating_h_time, fname_output_gating_mp_time, fname_output_gating_s_time
strdef fname_output_gating_m_space, fname_output_gating_h_space, fname_output_gating_mp_space, fname_output_gating_s_space
strdef Ve_fname_output, Istim_fname_output
strdef runtime_fname_output
strdef thresh_fname_output
strdef activation_fname_output
strdef aploctime_fname_output
strdef stim_units
strdef Ap_times_fname_output

if (flag_whichstim == 0) {
	stim_units = "mA"
} else if ((flag_whichstim == 1) || (flag_whichstim == 2)) {
	stim_units = "nA"
}

load_file("Saving.hoc")
load_file("Saving_Runtime.hoc")
load_file("Saving_Activation.hoc")

if (saveflag_end_ap_times==1) {
	load_file("Saving_Ap_end_times.hoc")
}

if (find_thresh == 1){
	load_file("FindThresh.hoc")
	load_file("Saving_Thresh.hoc")
}

if (saveflag_ap_loctime == 1){
	load_file("Saving_APLocTime.hoc")
}

proc run_all(){local myinner, myfiber, myamp, amp_ind
	myinner = $1
	myfiber = $2
	myamp   = $3
	amp_ind = $4

	Recording()

	trun_individual = startsw()

	// Read in Iapplied
	if (flag_Iapplied == 1) {
		sprint(VeSpace_Iapplied_fname, "../%s/data/inputs/TotalAppliedCurrent.dat", sim_path)
		Iapplied_file = new File()
		Iapplied_file.ropen(VeSpace_Iapplied_fname)
		Iapplied = new Vector(1)
		Iapplied.scanf(Iapplied_file)
		Iapplied_file.close()
	}

	// Read in Ve(x)
	if (flag_extracellular_stim == 1) {
		sprint(VeSpace_fname, "../%s/data/inputs/src_inner%d_fiber%d.dat",sim_path, myinner, myfiber)
		VeSpace_read()
		// Convert to mV (required for e_extracellular)
		VeSpace_data = VeSpace_data.mul(Ve_unitconv)

		if (flag_Iapplied == 1) {
			// Scale by Iapplied so that amplitudes are millivolts per milliamp applied at the electrode
			VeSpace_data = VeSpace_data.mul(1/Iapplied.x[0])
		}
	}

	// Read in Ve(x) for recording
	if (flag_extracellular_rec == 1) {
		sprint(VeSpace_rec_fname, "../%s/data/inputs/rec_inner%d_fiber%d.dat",sim_path, myinner, myfiber)
		VeSpace_extracellular_rec_read()

		// Convert to mV (required for e_extracellular)
		VeSpace_rec_data = VeSpace_rec_data.mul(Ve_unitconv)
	}

	// Read in Ve(t)
	sprint(VeTime_fname, "../%s/data/inputs/waveform.dat",sim_path)
	if (flag_extracellular_stim == 1) {
		VeTime_read()
	}

	sprint(Ve_fname_output,              "../%s/data/outputs/Ve_inner%d_fiber%d_amp%d.dat",              sim_path, myinner, myfiber, amp_ind)
	sprint(Istim_fname_output,           "../%s/data/outputs/Istim_inner%d_fiber%d_amp%d.dat",           sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_SFAP_time,       "../%s/data/outputs/SFAP_time_inner%d_fiber%d_amp%d.dat",       sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_Vm_time,         "../%s/data/outputs/Vm_time_inner%d_fiber%d_amp%d.dat",         sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_gating_m_time,   "../%s/data/outputs/gating_m_time_inner%d_fiber%d_amp%d.dat",   sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_gating_h_time,   "../%s/data/outputs/gating_h_time_inner%d_fiber%d_amp%d.dat",   sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_gating_mp_time,  "../%s/data/outputs/gating_mp_time_inner%d_fiber%d_amp%d.dat",  sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_gating_s_time,   "../%s/data/outputs/gating_s_time_inner%d_fiber%d_amp%d.dat",   sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_Vm_space,        "../%s/data/outputs/Vm_space_inner%d_fiber%d_amp%d.dat",        sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_gating_m_space,  "../%s/data/outputs/gating_m_space_inner%d_fiber%d_amp%d.dat",  sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_gating_h_space,  "../%s/data/outputs/gating_h_space_inner%d_fiber%d_amp%d.dat",  sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_gating_mp_space, "../%s/data/outputs/gating_mp_space_inner%d_fiber%d_amp%d.dat", sim_path, myinner, myfiber, amp_ind)
	sprint(fname_output_gating_s_space,  "../%s/data/outputs/gating_s_space_inner%d_fiber%d_amp%d.dat",  sim_path, myinner, myfiber, amp_ind)
	sprint(Ap_times_fname_output,        "../%s/data/outputs/Aptimes_inner%d_fiber%d_amp%d.dat",         sim_path, myinner, myfiber, amp_ind)
	sprint(aploctime_fname_output,       "../%s/data/outputs/ap_loctime_inner%d_fiber%d_amp%d.dat",      sim_path, myinner, myfiber, amp_ind)
    sprint(runtime_fname_output,         "../%s/data/outputs/runtime_inner%d_fiber%d_amp%d.dat",         sim_path, myinner, myfiber, amp_ind)


	if (find_thresh == 0) {
		// Run sim
		RunSim(myamp)
		print "N_APs = ", N_APs
		sprint(activation_fname_output, "../%s/data/outputs/activation_inner%d_fiber%d_amp%d.dat", sim_path, myinner, myfiber, amp_ind)
        Saving_Activation()

	}   else if (find_thresh == 1){
		// Run bisection search for thresholds
		FindThresh()
		// Run sim once more with final thresh from FindThresh()
		print "Running stimamp in final check for AP."
		RunSim(stimamp)
		print "N_APs = ", N_APs

		// Save threshold value
		sprint(thresh_fname_output, "../%s/data/outputs/thresh_inner%d_fiber%d.dat", sim_path, myinner, myfiber)
		Saving_Thresh()
	}

	// Save membrane current matrix
	if (saveflag_Imem==1) {
        sprint(Imembrane_fname_output, "../%s/data/outputs/Imembrane_axon%d_fiber%d_amp%d.dat", sim_path, myinner, myfiber, amp_ind)
        Imembrane = new File()
        Imembrane.wopen(Imembrane_fname_output)

        tstop_vector.vwrite(Imembrane)
        dt_vector.vwrite(Imembrane)
        axontotal_vector.vwrite(Imembrane)

        Imembrane_save_format_vector.vwrite(Imembrane)
        Imembrane.close()
    }

	// Save data
	Saving()

    if (saveflag_runtime == 1) {
        // Save individual run time (for each simulation)
        trun_individual = startsw() - trun_individual
        Saving_Runtime()
	}

	if (saveflag_ap_loctime == 1) {
		Saving_APLocTime()
	}


	if (saveflag_end_ap_times==1) {
		Saving_Ap_end_times()
	}
}

// ***************************************************************************

trun = startsw()

proc batchrun() {local stimamp_ind
	for stimamp_ind = 0, Namp-1 {
		run_all(inner_ind, fiber_ind, stimamp_values.x[stimamp_ind],  stimamp_ind)
	}
}

batchrun()

quit()
