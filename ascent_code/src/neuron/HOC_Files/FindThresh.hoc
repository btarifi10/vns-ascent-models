/*
The copyrights of this software are owned by Duke University.
Please refer to the LICENSE and README.md files for licensing instructions.
The source code can be found on the following GitHub repository: https://github.com/wmglab-duke/ascent
*/

/*
Description:
- Binary search algorithm to find threshold.

Important notes:
-

Variables that must be defined in wrapper/params file:
- thresh_resoln
- stimamp_bottom_init
- stimamp_top_init
- pc = new ParallelContext()
*/

// Vector containing results to pass back to batch run
objref thresh_values
Nresults = 1
thresh_values = new Vector(Nresults,0)

// Find threshold with a bisection search algorithm
proc FindThresh() {//local key

	check_top_flag    = 0 // 0 for upper-bound not yet found, value changes to 1 when the upper-bound is found
	check_bottom_flag = 0 // 0 for lower-bound not yet found, value changes to 1 when the lower-bound is found
	// when both found, enter bisection search

	iter = 1

	while(1) {

		if (check_top_flag == 0) {
			print "Running stimamp_top = ", stimamp_top
			RunSim(stimamp_top)
			N_APs_top = N_APs
			print "N_APs_top = ", N_APs
		}

		if (N_APs_top == 0) {
			if (find_block_thresh == 0) {
				print "WARNING: Initial stimamp_top value does not elicit an AP - need to increase its magnitude and/or increase tstop to detect evoked AP"
			} else {
				print "WARNING: Initial stimamp_top value does not block - need to increase its magnitude and/or increase tstop to block test pulse evoked AP"
			}

			if (increment_flag == 1) { // relative (increase upper-bound by a certain percentage of the previous value, e.g., 10%)
				stimamp_top    = stimamp_top*(1+rel_increment)
			} else if (increment_flag == 0) { // absolute (increase upper-bound by a certain amount + the previous value, e.g., 0.001 mA)
				stimamp_top    = stimamp_top + abs_increment
			}

		} else {
			check_top_flag = 1 // upper bound found
		}


		if (check_bottom_flag == 0) {
			print "Running stimamp_bottom = ", stimamp_bottom
			RunSim(stimamp_bottom)
			N_APs_bottom = N_APs
			print "N_APs_bottom = ", N_APs
		}

		if (N_APs_bottom != (0)) {
			if (find_block_thresh == 0) {
				print "WARNING: Initial stimamp_bottom value elicits an AP - need to decrease its magnitude and/or increase tstop to prevent evoked AP"
			} else {
				print "WARNING: Initial stimamp_bottom value blocks - need to decrease its magnitude and/or increase tstop to detect test pulse evoked AP"
			}

			if (increment_flag == 1) { // relative
				stimamp_bottom    = stimamp_bottom*(1-rel_increment) // relative (decrease lower-bound by a certain percentage of the previous value, e.g., -10%)
			} else if (increment_flag == 0) { // absolute (decrease lower-bound by a certain amount + the previous value, e.g., -0.001 mA)
				stimamp_bottom    = stimamp_bottom - abs_increment
			}

		} else {
			check_bottom_flag = 1 // lower bound found
		}

		if (N_APs_top != 0 && N_APs_bottom == 0) {
			print "Bounds set - entering bisection search"
			break
		}

		iter = iter+1

		if (iter > max_iter) {
			print "maximum number of bounds searching steps reached. breaking."
			quit()
		}
	}

	while(1) {
		stimamp_prev   = stimamp_top

		stimamp = (stimamp_bottom + stimamp_top) / 2
		print "stimamp = ", stimamp, "mA for extracellular and nA for intracellular (check flag_whichstim)"
		RunSim(stimamp)
		print "N_APs = ", N_APs

		if (termination_flag == 0) {
			//rel_thresh_resoln
			thresh_resoln = abs(rel_thresh_resoln) // not sure why user would enter negative tolerance, but just in case
			tolerance = abs((stimamp_bottom - stimamp_top) / stimamp_top)


		} else if (termination_flag == 1) {
			//abs_thresh_resoln
			thresh_resoln = abs(abs_thresh_resoln) // not sure why user would enter negative tolerance, but just in case
			tolerance = abs(stimamp_bottom - stimamp_top)

		}

		if ((tolerance) < thresh_resoln) {	// resolution of search
			// Use last amplitude that produced an action potential
			if (N_APs == 0) {
				stimamp = stimamp_prev
			}

			print "Done searching! stimamp: ", stimamp, "mA for extracellular and nA for intracellular (check flag_whichstim)"

			RunSim(stimamp)
			print "N_APs = ", N_APs

			break
		} else if (N_APs >= 1) {				// found an AP
			if (find_block_thresh == 1) {
				stimamp_prev = stimamp
				stimamp_top = stimamp
			} else if (find_block_thresh == 0) {
				stimamp_prev = stimamp
				stimamp_top  = stimamp
			}

		} else if (N_APs == 0) {				// no AP
			if (find_block_thresh == 1) {
				stimamp_bottom = stimamp
			} else if (find_block_thresh == 0) {
				stimamp_bottom = stimamp
				stimamp_prev = stimamp_top
			}
		}

		print "stimamptop ", stimamp_top
		print "stimampbottom ", stimamp_bottom

	}

	print "Threshold: ", stimamp, "mA for extracellular and nA for intracellular (check flag_whichstim)"


	thresh_values.x[0] = stimamp
}
