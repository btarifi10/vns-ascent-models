/*
The copyrights of this software are owned by Duke University.
Please refer to the LICENSE and README.md files for licensing instructions.
The source code can be found on the following GitHub repository: https://github.com/wmglab-duke/ascent
*/

/*
Author: Nikki Pelot
Date created: February 4, 2016

Description:
- Initialize model neuron
- Take large time steps from t<0 to t=0 to initialize to SS
- Time loop, including applying and recording Ve

Important notes:
- Only check for AP if find_thresh == 1.

Variables that must be defined in wrapper/params file:
- t_initSS
- dt_initSS
- v_init
- checknode_Ve_values
- ap_thresh

Input arg's:
- Extracellular stimulation amplitude
- Intracellular stimulation amplitude
*/

// Set up the APCount; check all nodes in case tstop is too short for AP to reach checknode1
objref apc[axonnodes]
objref apc_end_min
objref apc_end_max
objref apc_end_min_timevector
objref apc_end_max_timevector
objref apc_node_times

for node_ind=0, axonnodes-1 {
	if (fiber_type == 2) {// myelinated fiber
		s[node_ind*11].sec apc[node_ind] = new APCount(0.5)
	} else {
		s[node_ind].sec    apc[node_ind] = new APCount(0.5)
	}
	apc[node_ind].thresh = ap_thresh
}

if(fiber_type==3) { //  c fiber built from cFiberBuilder.hoc
	if(c_fiber_model_type==2 && passive_end_nodes==1){ // Tigerholm OR _<Brandon>_
		execerror("Program cannot balance Tigerholm for passive_end_nodes=1, must be 0.")
	} else if (c_fiber_model_type==2 && passive_end_nodes==0) {
		load_file("balanceTigerholm.hoc")
	}
}

if (saveflag_end_ap_times==1) {

	node_ind_min = int((axonnodes-1)*deltaz*loc_min_end_ap/deltaz)
	node_ind_max = int((axonnodes-1)*deltaz*loc_max_end_ap/deltaz)

	if (fiber_type == 2) {
		s[node_ind_min*11].sec apc_end_min = new APCount(0.5)
		s[node_ind_max*11].sec apc_end_max = new APCount(0.5)
	} else {
		s[node_ind_min].sec apc_end_min = new APCount(0.5)
		s[node_ind_max].sec apc_end_max = new APCount(0.5)
	}

	apc_end_min.thresh = ap_end_thresh
	apc_end_max.thresh = ap_end_thresh

	apc_end_min_timevector = new Vector()
	apc_end_min.record(apc_end_min_timevector)

	apc_end_max_timevector = new Vector()
	apc_end_max.record(apc_end_max_timevector)
}


proc RunSim() {local myamp
	if (saveflag_Imem==1) {
		dt_vector = new Vector(1,dt)
		tstop_vector = new Vector(1,tstop)
		axontotal_vector = new Vector(1,axontotal)
		Imembrane_save_format_vector = new Vector((axontotal)*(n_tsteps+1),0)
	}
	myamp = $1
	// If recording extracellular signals, initialize a vector to store the SFAP
	if (flag_extracellular_rec == 1) {
		SFAP = new O1d(1)
		SFAP.o[0] = new Vector(int(n_tsteps/SFAP_dt_downsample_factor)+1,0)
	}

	if (flag_whichstim == 0) {
		stimamp_extra = myamp
	} else if (flag_whichstim == 1) {
		if (fiber_type == 2) {// myelinated fiber
			s[IntraStim_PulseTrain_ind*11].sec stim.amp = myamp
		} else {
			s[IntraStim_PulseTrain_ind].sec stim.amp = myamp
		}
	}

	finitialize(v_init)

	// if Tigerholm, need to balance
	if(fiber_type==3){ 			   //  c fiber built from cFiberBuilder.hoc
		if(c_fiber_model_type==2 && passive_end_nodes==0){ // Tigerholm OR _<Brandon>_
			balance()
		}
	}

	for seg_ind = 0, axontotal-1 {
		s[seg_ind].sec.e_extracellular(0.5) = 0
	}

	// Allow time for model to read steady-state using large dt before actually starting stimulation
	t     = t_initSS			// Start before t=0
	dtsav = dt
	dt    = dt_initSS			// Large dt
	while (t <= -dt) {
		fadvance()
	}
	dt = dtsav
	t  = 0
	fcurrent()
	frecord_init()

	// Time loop
	for t_ind=0, n_tsteps-1 {
		//print "t = ", t_ind*dt, "ms"
		for seg_ind = 0, axontotal-1 {
			if (flag_extracellular_stim == 1) {
				s[seg_ind].sec.e_extracellular(0.5) = stimamp_extra * VeTime_data.x[t_ind] * VeSpace_data.x[seg_ind]
			}
			// Record Vm and/or gating vs x at single time points
			if (saveflag_gating_space == 1) {
				if (!(fiber_type == 2)) {
					execerror("Vm(x) and gating(x) recording only set up for myelinated fibers")
				}
				// Loop through time points where I want to save spatial distribution
				for time_save_ind = 0, Nchecktimes-1 {
					// Save data if time point is correct and if node of Ranvier
					if ((t_ind == checktime_values.x[time_save_ind]) && ((seg_ind%11) == 0)) {
						if  (saveflag_Vm_space == 1) {
							savevec_Vm_space.o[time_save_ind].x[seg_ind/11] = node[seg_ind/11].v(0.5)
						}
						if ((saveflag_gating_space == 1) && ((seg_ind%11) == 0)) {
							// Can't save gating params of end nodes if using passive end nodes
							if (!((passive_end_nodes == 1) && ((seg_ind == 0)||(seg_ind == axontotal-1)))) {
								// Redundant check because error check above should indicate that it's only implemented for myelinated fibers
								if (fiber_type == 2) {
									savevec_m_space.o[time_save_ind].x[seg_ind/11]  = node[seg_ind/11].m_axnode_myel(0.5)
									savevec_h_space.o[time_save_ind].x[seg_ind/11]  = node[seg_ind/11].h_axnode_myel(0.5)
									savevec_mp_space.o[time_save_ind].x[seg_ind/11] = node[seg_ind/11].mp_axnode_myel(0.5)
									savevec_s_space.o[time_save_ind].x[seg_ind/11]  = node[seg_ind/11].s_axnode_myel(0.5)
								}
							}
						}
					}
				}
			}
		}
		if (flag_extracellular_stim == 1 && saveflag_Ve == 1) {
			savevec_Ve.o[0].x[t_ind] = s[checknode_Ve_values.x[0]].sec.e_extracellular(0.5)
		}

		if (flag_extracellular_rec == 1 && t_ind%SFAP_dt_downsample_factor==0) {
			// Calculate the net extracellular current exiting each compartment, taking into account periaxonal current.
			// For unmyelinated axons, which have no periaxonal current, the calculating reduces to simply outputing the default i_membrane through the compartment's membrane.
			for seg_ind = 0, axontotal-1 {
				node_length = 1e-4*s[seg_ind].sec.L // [cm]
				node_diameter = 1e-4*s[seg_ind].sec.diam // [cm]
				i_membrane_seg_i = PI*node_length*node_diameter*s[seg_ind].sec.i_membrane(0.5) // [mA]
				/*NOTE: To manually compute i_membrane_seg_i (i.e. without the i_membrane variable from the extracellular mechanism), use the lines of code below.
				Results should be *exactly* the same (at least <<1% discrepancy). (These lines work for non-node compartments. For nodal compartments, you need to
				extract the gating parameters as well). dVm_dt is computed as the difference between the current membrane potential and a previous membrane potential
				(vmembrane_previous). Make sure it is for the correponding node.
					im_cap = PI*node_length*node_diameter*s[seg_ind].sec.cm*(s[seg_ind].sec.v-vmembrane_previous)/dt // capacitive current through membrane due to dVm/dt [uA]
					im_R = (s[seg_ind].sec.v-s[seg_ind].sec.e_pas)*(PI*(node_length*node_diameter*s[seg_ind].sec.g_pas)) // resistive current through membrane due to Vm [mA]
					im_theoretical = im_cap*0.001 + im_R // [mA] this will be the same as the value for i_membrane
				*/
				if (fiber_type == 2) {
					vext_node = s[seg_ind].sec.vext[0](0.5) // [mV]
					node_xraxial = s[seg_ind].sec.xraxial[0] // [megaOhm/cm]
					// if there is a compartment to the left of the seg_ind, calculate the periaxonal current traveling between the two compartments
					if (seg_ind>0) {
						vext_periaxonal_left = s[seg_ind-1].sec.vext[0](0.5) // [mV]
						compartment_length_left = 1e-4*s[seg_ind-1].sec.L // [cm]
						compartment_xraxial_left = s[seg_ind-1].sec.xraxial[0] // [megaOhm/cm]
						R_periaxonal_left = 1e6*(node_xraxial*(node_length/2) + compartment_xraxial_left*(compartment_length_left/2)) // [Ohm]
						periaxonal_current_from_left_to_node = (vext_periaxonal_left-vext_node)/R_periaxonal_left // [mA]
					} else {
						periaxonal_current_from_left_to_node = 0
					}

					// if there is a compartment to the right of the seg_ind, calculate the periaxonal current traveling between the two compartments
					if (seg_ind<(axontotal-1)) {
						vext_periaxonal_right = s[seg_ind+1].sec.vext[0](0.5) // [mV]
						compartment_length_right = 1e-4*s[seg_ind+1].sec.L // [cm]
						compartment_xraxial_right = s[seg_ind+1].sec.xraxial[0] // [megaOhm/cm]
						R_periaxonal_right = 1e6*(node_xraxial*(node_length/2) + compartment_xraxial_right*(compartment_length_right/2)) // [Ohm]
						periaxonal_current_from_right_to_node = (vext_periaxonal_right-vext_node)/R_periaxonal_right // [mA]
					} else {
						periaxonal_current_from_right_to_node = 0
					}

					net_i_extracellular_seg_i = periaxonal_current_from_left_to_node + periaxonal_current_from_right_to_node + i_membrane_seg_i // [mA]

				} else {
					// for unmyelinated axons, the current through the membrane is all that is needed
					net_i_extracellular_seg_i = i_membrane_seg_i // [mA]
				}

				if (saveflag_Imem==1) {
				// for Imembrane_save_format_vector, save the current at the membrane, not the net current entering the extracellular space
				Imembrane_save_format_vector.x[seg_ind*(n_tsteps+1) + t_ind] = net_i_extracellular_seg_i
				}

				// Store SFAP signal (in V) contributed by this latest time point and node location
				// multiply VeSpace_rec_data by 1e3 because it is mV per mA by default, so desired units is uV per mA
				SFAP.o[0].x[int(t_ind/SFAP_dt_downsample_factor)] = SFAP.o[0].x[int(t_ind/SFAP_dt_downsample_factor)] + 1e3*VeSpace_rec_data.x[seg_ind] * net_i_extracellular_seg_i
			}
		}

		fadvance()
	}

	// Check for at least one action potential at at least one node of Ranvier
	print "Checking for AP"
	N_APs = 0

	if (find_block_thresh == 1) {
		node_ind = int((axonnodes-1)*ap_detect_location)

		if (apc[node_ind].time > IntraStim_PulseTrain_delay) { // Detected at least one AP, so didn't get block, so need to raise the lower bound (N_APs<N_minAPs) on the bisection search
			//print apc[node_ind].time
			//check_AP = 0			// Detected an action potential
			N_APs = 0
		} else { // Didn't detect an AP, so got block, so need to drop the upper bound (N_APs>=N_minAPs) on the bisection search
			N_APs = 1
		}
	} else if (find_block_thresh == 0) {
		node_ind = int((axonnodes-1)*ap_detect_location)

		if (apc[node_ind].n >= N_APs) {
			N_APs = apc[node_ind].n			// Detected an action potential
		}
	}
}
